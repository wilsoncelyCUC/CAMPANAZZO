continue
@post
session[:post_id]
next
       session[:post_id] 
@post.id
next
continue
@post
@post.profession = profession
@post
@post.profession_id = profession
[D
@post
next
@post
@post.create?
@post.created?
@post.save?
next
continue
next
profession
next
continue
session[:profession_name]
profession
next
 @post
next
@profile_customer
@profile
@profile_worker
@post
continue
!session[:profession_name].empty?
1session[:profession_name].empty?
session[:profession_name].empty?
session[:profession_name]
!session[:profession_name].nil?
continue
@post.save
next
@post.profession_id
next
profession
next
continue
@post.save
next
profession
next
continue
profession
next
continue
current_page?(new_post_path)
current_page?(from: new_post_path)
current_page?
current_page?(from: profiles_path)
current_page?(from: root_path)
current_page?(from: new_post_path)
@profile_connected
profile_connected
current_page?(new_post_path)
current_page?(posts_path)
current_page?(root_path)
current_page?(controller: 'pages')
current_page?(controller: 'profiles')
current_page?(controller: 'profile')
current_page?(controller: 'post')
current_page?(controller: 'post', action: 'new')
current_page?(controller: 'profiles', action: 'show')
current_page?(controller: 'profiles', action: 'index')
current_page?(controller: 'profile', action: 'show')
current_page?(controller: 'profiles', action: 'show')
current_page?(controller: 'profiles', action: 'index')
current_page?('/pages/home')
current_page?('/pages/')
current_page?('/shop/checkout')
current_page?
current_page?(controller
if current_page?(controller: 'pages', action: 'home')
continue
Post.find(session[:post_id]).profession.id
@profile_worker.my_professions.ids.include?(Post.find(session[:post_id]).profession.id)
@profile_worker.my_professions.ids
@profile_worker.my_professions.id
@profile_worker.my_professions
@profile_worker.my_professions.include?(Post.find(session[:post_id]).profession.id)
Post.find(session[:post_id]).profession.id
Post.find(session[:post_id]).profession
next
continue
next
session[:profile_worker].nil?
next
net
continue
session[:profile_worker]
next
session[:profile_worker]
next
params[:search]
continue
@post
next
continue
session[:profile_worker]
continue
continue]=
next
session[:profile_worker]
continue
next
session[:profession_name].nil? 
session[:profession_name] 
next
session[:profession_name]
continue
next
displayer
next
displayer
next
@profile_worker == @profile_connected
next
displayer
next
@profile_worker == @profile_connected
@profile_worker
@profile_connected
@profile_conneted
continue
@profile_connected
@profile_worker
continue
Review.all
@reviews
@reviews = Review.where(profile_id: @profile_worker.id)
@reviews = Review.where(profile_id: @profile_worker)
@profile_worker
@profile_worke
continue
@skills
next
continue
next
@skills
continue
post
end_date
start_date
Reservation.create!(post_id:185, profile_id:323, start_date: start_date, end_date: end_date )po
profile_id = Profile.joins(:my_professions).where(my_professions:{profession_id: profession_wanted.id}).first
Reservation.create!(post_id:185, profile_id:323, start_date: start_date, end_date: end_date )
profile_id = Profile.joins(:my_professions).where(my_professions:{profession_id: profession_wanted.id}).first.id
profile = Profile.joins(:my_professions).where(my_professions:{profession_id: profession_wanted.id}).first.id
post.id
Reservation.create!(post_id: post.id,profile_id: Profile.joins(:my_professions).where(my_professions:{profession_id: profession_wanted.id}).first.id , start_date: start_date, end_date: end_date )
start_date
 Profile.joins(:my_professions).where(my_professions:{profession_id: profession_wanted.id}).first.id
post.id
!Profile.joins(:my_professions).where(my_professions:{profession_id: profession_wanted.id}).empty?
continue
proo = Profession.find((MyProfession.find(professions_bucket.sample)).profession_id)
proo = Profession.find((MyProfession.find(professions_bucket.sample)).id)
proo = Profession.find(MyProfession.find(professions_bucket.sample))
proo = Profession.find(MyProfession.find(professions_bucket.sample.id))
proo = Profession.find(MyProfession.find(professions_bucket.sample))
proo
proo = Profession.find(my.profession_id)
my = MyProfession.find(professions_bucket.sample)
profession_wanted[0]
profession_wanted
profesion_wanted
  profession_wanted = Profession.joins(:my_professoins).where(my_professions: { id: professions_bucket.sample })
target = Profile.find(professions_bucket.sample)
target + Profile.find(professions_bucket.sample)
 professions_bucket.sample.class
 professions_bucket.sample.toclass 
Profile.find(professions_bucket.sample)
 professions_bucket.sample 
MyProfession.all
pro
pro = MyProfession.where(profile_id: professions_bucket.sample)
 professions_bucket.sample 
profession_wanted = Profession.joins(:my_professoins).where(my_professions: { profile_id: professions_bucket.sample })
profession_wanted = Profession.joins(:my_professoins).where(:my_professions { profile_id: professions_bucket.sample })
profession_wanted[0]
profession_wanted
profession_wanted = Profession.joins(:my_professoins).where(my_professions: { profile_id: professions_bucket.sample })
Profession.joins(:my_professoins).where(my_professions: { profile_id: professions_bucket.sample })
continue
professions_bucket.sample
professions_bucket.sample.id
Profession.joins(:my_professoins).where(my_professions: { profile_id: professions_bucket.sample.id })
continue
profession_wanted = Profession.joins(:my_professoins).where(my_professions: { profile_id:2 professions_bucket} )
profession_wanted = Profession.joins(:my_professoins).where(:my_professions { profile_id: professions_bucket} )
profession_wanted[0]
profession_wanted
profession_wanted = Profession.joins(:my_professoins).where(my_professions: { profile_id: professions_bucket} )
profession_wanted = Profession.joins(:my_professoins).where(my_professions.arel_table[:order_count].in(professions_bucket) )
profession_wanted = Profession.joins(:my_professoins).where(my_professions { profile_id: professions_bucket} )
profession_wanted = Profession.joins(:my_professoins).where(my_profession.profile_id: professions_bucket )
 professions_bucket 
 profession_wanted
profession_wanted = Profession.joins(:my_professoins).where("my_profession.profile_id IN ?", professions_bucket ).references(:my_professions).sample
professions_bucket
profession_wanted
profession_wanted = Profession.joins(:my_professoins).where("my_profession.profile_id IN ?", professions_bucket ).references(:my_professoins).sample
 Profession.joins(:my_professoins).where("my_profession.profile_id IN ?", professions_bucket ).references(:my_professoins)
 Profession.joins(:my_professoins).where("my_profession.profile_id IN ?", professions_bucket ).references(:my_professoins).sample
continue
contine
continue
!Profile.joins(:my_professions).where(my_professions:{profession_id: profession_wanted.id}).empty?
next
 !Profile.joins(:my_professions).where(my_professions:{profession_id: profession_wanted.id}).empty?
next
!Profile.joins(:my_professions).where(my_professions:{profession_id: profession_wanted.id}).empty?
continue
continie
next
post
back
profile
post
post.id
next
!Profile.joins(:my_professions).where(my_professions:{profession_id: profession_wanted.id}).empty?
next
puts "#{profile.name} has created the post : #{post.name} "
next
start_date
 end_date
next
end_hour
next
start_date
next
puts "#{profile.name} has created the post : #{post.name} "
profile
:   puts "#{profile.name} has created the post : #{post.name} "
next
 profession_wanted
next
puts "#{profile.name} #{profile.last_name} with #{user.email} created"
next
 profession_wanted
!Profile.joins(:my_professions).where(my_professions:{profession_id: profession_wanted.id}).empty?
quit
post.quick_assessment[0]
post.quick_assessment
post.quick_assess`
